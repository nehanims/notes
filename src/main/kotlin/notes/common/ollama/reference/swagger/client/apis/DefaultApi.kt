/**
 * ollama API
 * API for interacting with ollama models
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ApiCopyBody
import io.swagger.client.models.ApiCreateBody
import io.swagger.client.models.ApiEmbeddingsBody
import io.swagger.client.models.ApiGenerateBody
import io.swagger.client.models.ApiPullBody
import io.swagger.client.models.ApiPushBody
import io.swagger.client.models.ApiShowBody
import notes.common.pubtator3.reference.client.models.InlineResponse200
import notes.common.pubtator3.reference.client.models.InlineResponse2001
import notes.common.pubtator3.reference.client.models.InlineResponse2002
import io.swagger.client.models.InlineResponse2003
import io.swagger.client.models.InlineResponse2004
import io.swagger.client.models.InlineResponse2005

import io.swagger.client.infrastructure.*
import notes.common.pubtator3.reference.client.infrastructure.ApiClient
import notes.common.pubtator3.reference.client.infrastructure.ClientError
import notes.common.pubtator3.reference.client.infrastructure.ClientException
import notes.common.pubtator3.reference.client.infrastructure.RequestMethod
import notes.common.pubtator3.reference.client.infrastructure.ResponseType
import notes.common.pubtator3.reference.client.infrastructure.ServerError
import notes.common.pubtator3.reference.client.infrastructure.ServerException
import notes.common.pubtator3.reference.client.infrastructure.Success

class DefaultApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * Copy a Model
     * Copy a model. Creates a model with another name from an existing model
     * @param body  
     * @return InlineResponse2001
     */
    @Suppress("UNCHECKED_CAST")
    fun apiCopyPost(body: ApiCopyBody): InlineResponse2001 {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = notes.common.pubtator3.reference.client.infrastructure.RequestConfig(
            RequestMethod.POST,
            "/api/copy"
        )
        val response = request<InlineResponse2001>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2001
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Create a Model
     * Create a model from a Modelfile
     * @param body  
     * @return InlineResponse2001
     */
    @Suppress("UNCHECKED_CAST")
    fun apiCreatePost(body: ApiCreateBody): InlineResponse2001 {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = notes.common.pubtator3.reference.client.infrastructure.RequestConfig(
            RequestMethod.POST,
            "/api/create"
        )
        val response = request<InlineResponse2001>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2001
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete a Model
     * Delete a model and its data
     * @param model Name of the model to delete (required) 
     * @return InlineResponse2001
     */
    @Suppress("UNCHECKED_CAST")
    fun apiDeleteDelete(model: kotlin.String): InlineResponse2001 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("model", listOf(model.toString()))
        }
        val localVariableConfig = notes.common.pubtator3.reference.client.infrastructure.RequestConfig(
            RequestMethod.DELETE,
            "/api/delete", query = localVariableQuery
        )
        val response = request<InlineResponse2001>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2001
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Generate Embeddings
     * Generate embeddings from a model
     * @param body  
     * @return InlineResponse2005
     */
    @Suppress("UNCHECKED_CAST")
    fun apiEmbeddingsPost(body: ApiEmbeddingsBody): InlineResponse2005 {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = notes.common.pubtator3.reference.client.infrastructure.RequestConfig(
            RequestMethod.POST,
            "/api/embeddings"
        )
        val response = request<InlineResponse2005>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2005
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Generate a completion
     * Generate a response for a given prompt with a provided model. This is a streaming endpoint.
     * @param body  
     * @return InlineResponse200
     */
    @Suppress("UNCHECKED_CAST")
    fun apiGeneratePost(body: ApiGenerateBody): InlineResponse200 {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = notes.common.pubtator3.reference.client.infrastructure.RequestConfig(
            RequestMethod.POST,
            "/api/generate"
        )
        val response = request<InlineResponse200>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse200
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Pull a Model
     * Download a model from the ollama library
     * @param body  
     * @return InlineResponse2004
     */
    @Suppress("UNCHECKED_CAST")
    fun apiPullPost(body: ApiPullBody): InlineResponse2004 {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = notes.common.pubtator3.reference.client.infrastructure.RequestConfig(
            RequestMethod.POST,
            "/api/pull"
        )
        val response = request<InlineResponse2004>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2004
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Push a Model
     * Upload a model to a model library
     * @param body  
     * @return InlineResponse2001
     */
    @Suppress("UNCHECKED_CAST")
    fun apiPushPost(body: ApiPushBody): InlineResponse2001 {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = notes.common.pubtator3.reference.client.infrastructure.RequestConfig(
            RequestMethod.POST,
            "/api/push"
        )
        val response = request<InlineResponse2001>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2001
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Show Model Information
     * Show details about a model including modelfile, template, parameters, license, and system prompt
     * @param body  
     * @return InlineResponse2003
     */
    @Suppress("UNCHECKED_CAST")
    fun apiShowPost(body: ApiShowBody): InlineResponse2003 {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = notes.common.pubtator3.reference.client.infrastructure.RequestConfig(
            RequestMethod.POST,
            "/api/show"
        )
        val response = request<InlineResponse2003>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2003
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List Local Models
     * List models that are available locally
     * @return InlineResponse2002
     */
    @Suppress("UNCHECKED_CAST")
    fun apiTagsGet(): InlineResponse2002 {
        val localVariableConfig = notes.common.pubtator3.reference.client.infrastructure.RequestConfig(
            RequestMethod.GET,
            "/api/tags"
        )
        val response = request<InlineResponse2002>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2002
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
